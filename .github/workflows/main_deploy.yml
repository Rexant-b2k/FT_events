name: Event deploy

on:
  push:
    branches:
      - main

jobs:

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    services:

      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: events_db
          POSTGRES_USER: events_user
          POSTGRES_PASSWORD: events_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r ./requirements.txt
    - name: Test with pytest
      env:
        POSTGRES_USER: events_user
        POSTGRES_PASSWORD: events_password
        POSTGRES_DB: events_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        cd backend
        pytest event_app


  build_backend_and_push_to_docker_hub:
    name: Build and Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./backend/
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/events_backend:latest

  build_frontend_and_push_to_docker_hub:
    name: Build and Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/events_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ./infra/docker-compose.yml
          target: ft_events
      - name: Copy nginx.conf via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ./infra/nginx.conf
          target: ft_events
      - name: Copy nginx default.conf via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ./infra/default.conf
          target: ft_events
      - name: Main deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ft_events/infra
            rm -f .env
            touch .env
            echo DEBUG=${{ vars.DEBUG }} > .env
            echo DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }} >> .env

            echo POSTGRES_DB=${{ vars.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ vars.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_HOST=${{ vars.POSTGRES_HOST }} >> .env
            echo POSTGRES_PORT=${{ vars.POSTGRES_PORT }} >> .env

            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }}" >> .env
            echo EMAIL_HOST=${{ vars.EMAIL_HOST }} >> .env
            echo EMAIL_HOST_USER=${{ vars.EMAIL_HOST_USER }} >> .env
            echo DEFAULT_FROM_EMAIL=${{ vars.DEFAULT_FROM_EMAIL }} >> .env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
            echo EMAIL_PORT=${{ vars.EMAIL_PORT }} >> .env
            echo EMAIL_USE_SSL=${{ vars.EMAIL_USE_SSL }} >> .env
            echo EMAIL_USE_TLS=${{ vars.EMAIL_USE_TLS }} >> .env

            echo CSRF_TRUSTED_ORIGINS=${{ vars.CSRF_TRUSTED_ORIGINS }} >> .env

            echo CELERY_BROKER=${{ vars.CELERY_BROKER }} >> .env

            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml down
            docker compose -f docker-compose.yml up -d
            docker system prune -af

  send_message:
    name: Send message to Telegram Bot about succesful deploy
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.STATUS_TG_SEND_TO }}
        token: ${{ secrets.STATUS_TG_BOT_TOKEN }}
        message: Funtech deploy was succesful!
